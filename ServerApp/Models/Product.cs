using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace ServerApp.Models;

/// <summary>
/// Represents a product in the inventory system
/// </summary>
/// <remarks>
/// This class serves as the primary model for product data in the API,
/// containing all essential product information including category details
/// </remarks>
public class Product
{
    /// <summary>
    /// Unique identifier for the product
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    /// Name of the product
    /// </summary>
    [Required(ErrorMessage = "Product name is required")]
    [StringLength(100, ErrorMessage = "Name cannot be longer than 100 characters")]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Description of the product
    /// </summary>
    [StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Price of the product in the system's currency
    /// </summary>
    [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than 0")]
    public decimal Price { get; set; }

    /// <summary>
    /// Current stock level of the product
    /// </summary>
    [Range(0, int.MaxValue, ErrorMessage = "Stock cannot be negative")]
    public int Stock { get; set; }

    /// <summary>
    /// Category classification of the product
    /// </summary>
    public Category Category { get; set; } = new();

    /// <summary>
    /// Foreign key reference to the category
    /// </summary>
    public int CategoryId { get; set; }

    /// <summary>
    /// The timestamp when the product was created
    /// </summary>
    [JsonPropertyName("createdAt")]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// The timestamp when the product was last updated
    /// </summary>
    [JsonPropertyName("updatedAt")]
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Data transfer object for creating a new product
/// </summary>
/// <remarks>
/// This model is used specifically for POST requests to create new products.
/// It excludes the Id field as this will be generated by the system.
/// All other product information is required for creation.
/// </remarks>
public class CreateProductRequest
{
    /// <summary>
    /// Name of the new product
    /// </summary>
    [Required(ErrorMessage = "Product name is required")]
    [StringLength(100, ErrorMessage = "Name cannot be longer than 100 characters")]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Description of the product
    /// </summary>
    [StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Initial price of the new product
    /// </summary>
    [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than 0")]
    public decimal Price { get; set; }

    /// <summary>
    /// Initial stock level of the new product
    /// </summary>
    [Range(0, int.MaxValue, ErrorMessage = "Stock cannot be negative")]
    public int Stock { get; set; }

    /// <summary>
    /// Category for the new product
    /// </summary>
    public Category Category { get; set; } = new();
}

/// <summary>
/// Data transfer object for updating an existing product
/// </summary>
/// <remarks>
/// This model is used specifically for PUT requests to update existing products.
/// All fields must be provided even if only some are being updated,
/// ensuring consistent product state after updates.
/// </remarks>
public class UpdateProductRequest
{
    /// <summary>
    /// Updated name of the product
    /// </summary>
    [Required(ErrorMessage = "Product name is required")]
    [StringLength(100, ErrorMessage = "Name cannot be longer than 100 characters")]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Updated description of the product
    /// </summary>
    [StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Updated price of the product
    /// </summary>
    [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than 0")]
    public decimal Price { get; set; }

    /// <summary>
    /// Updated stock level of the product
    /// </summary>
    [Range(0, int.MaxValue, ErrorMessage = "Stock cannot be negative")]
    public int Stock { get; set; }

    /// <summary>
    /// Updated category for the product
    /// </summary>
    public Category Category { get; set; } = new();
}