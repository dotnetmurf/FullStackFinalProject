@using Microsoft.AspNetCore.Components.Forms
@using ClientApp.Models

<div class="card">
    <div class="card-header">
        <h3>@(Product?.Id > 0 ? "Edit" : "Create") Product</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@ProductRequest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" @bind-Value="ProductRequest.Name" class="form-control" />
                <ValidationMessage For="@(() => ProductRequest.Name)" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" @bind-Value="ProductRequest.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => ProductRequest.Description)" />
            </div>

            <div class="row mb-3">
                <div class="col">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" @bind-Value="ProductRequest.Price" class="form-control" />
                    <ValidationMessage For="@(() => ProductRequest.Price)" />
                </div>
                <div class="col">
                    <label for="stockQuantity" class="form-label">Stock Quantity</label>
                    <InputNumber id="stockQuantity" @bind-Value="ProductRequest.StockQuantity" class="form-control" />
                    <ValidationMessage For="@(() => ProductRequest.StockQuantity)" />
                </div>
            </div>

            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <InputSelect id="category" @bind-Value="ProductRequest.CategoryId" class="form-select">
                    <option value="">Select a category...</option>
                    @if (Categories != null)
                    {
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ProductRequest.CategoryId)" />
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                <button type="submit" class="btn btn-primary">@(Product?.Id > 0 ? "Update" : "Create")</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Product? Product { get; set; }
    [Parameter] public List<Category>? Categories { get; set; }
    [Parameter] public EventCallback<ProductRequest> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ProductRequest ProductRequest { get; set; } = new();

    protected override void OnParametersSet()
    {
        if (Product != null)
        {
            // Map Product to ProductRequest for editing
            ProductRequest = new ProductRequest
            {
                Name = Product.Name,
                Description = Product.Description,
                Price = Product.Price,
                StockQuantity = Product.Stock,
                CategoryId = Product.Category?.Id ?? 0
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        await OnSubmit.InvokeAsync(ProductRequest);
    }
}