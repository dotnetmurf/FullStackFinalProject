@using ClientApp.Models
@using ClientApp.Shared.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@Product" OnValidSubmit="HandleSubmit" FormName="productForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger mb-3" />

    <div class="card">
        <div class="card-body">
            <div class="form-group mb-3">
                <label for="name">Name</label>
                <div class="input-group">
                    <InputText id="name" class="form-control" @bind-Value="Product.Name" placeholder="Enter product name" />
                    <div class="input-group-text">
                        <span class="text-muted small">Required</span>
                    </div>
                </div>
                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Product.Name)" />
            </div>

            <div class="form-group mb-3">
                <label for="description">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="Product.Description" 
                             rows="3" placeholder="Enter product description" />
                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Product.Description)" />
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="price">Price</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <InputNumber id="price" class="form-control" @bind-Value="Product.Price" step="0.01" />
                        </div>
                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Product.Price)" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="stock">Stock</label>
                        <div class="input-group">
                            <InputNumber id="stock" class="form-control" @bind-Value="Product.Stock" min="0" />
                            <span class="input-group-text">units</span>
                        </div>
                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Product.Stock)" />
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="category">Category</label>
                <div class="input-group">
                    @if (Categories?.Any() == true)
                    {
                        <InputSelect id="category" class="form-control" @bind-Value="_categoryName">
                            <option value="">-- Select Category --</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-outline-secondary" @onclick="ShowNewCategoryInput">
                            <i class="bi bi-plus"></i> New
                        </button>
                    }
                    else
                    {
                        <InputText id="categoryName" class="form-control" @bind-Value="_categoryName" 
                                 placeholder="Enter category name" />
                    }
                </div>
                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Product.Category)" />
            </div>

            @if (ShowServerErrors && ServerErrors.Any())
            {
                <div class="alert alert-danger mt-3">
                    <ul class="mb-0">
                        @foreach (var error in ServerErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            <div class="button-group mt-4">
                <button type="submit" class="btn @(IsNew ? "btn-success" : "btn-primary")" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">@(IsNew ? "Creating..." : "Saving...")</span>
                    }
                    else
                    {
                        <span>@(IsNew ? "Create Product" : "Save Changes")</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="HandleCancelAsync" disabled="@IsLoading">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    /// <summary>
    /// Gets or sets the product to edit
    /// </summary>
    [Parameter]
    public Product Product { get; set; } = default!;

    /// <summary>
    /// Gets or sets whether this is a new product
    /// </summary>
    [Parameter]
    public bool IsNew { get; set; }

    /// <summary>
    /// Gets or sets whether the form is in a loading state
    /// </summary>
    [Parameter]
    public bool IsLoading { get; set; }

    /// <summary>
    /// Gets or sets whether to show server validation errors
    /// </summary>
    [Parameter]
    public bool ShowServerErrors { get; set; }

    /// <summary>
    /// Gets or sets the server validation errors
    /// </summary>
    [Parameter]
    public IEnumerable<string> ServerErrors { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets the list of available categories
    /// </summary>
    [Parameter]
    public IEnumerable<string> Categories { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Event callback when the product is saved
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnSave { get; set; }

    /// <summary>
    /// Event callback when the form is cancelled
    /// </summary>
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private string _categoryName = "";
    private bool _isCustomCategory = false;

    protected override void OnInitialized()
    {
        _categoryName = Product.Category?.Name ?? "";
        _isCustomCategory = !Categories.Contains(_categoryName);
    }

    private void ShowNewCategoryInput()
    {
        _isCustomCategory = true;
        _categoryName = "";
        StateHasChanged();
    }

    private void HandleSubmit(EditContext context)
    {
        if (context.Validate())
        {
            if (!string.IsNullOrWhiteSpace(_categoryName))
            {
                Product.Category = new Category 
                { 
                    Id = Product.Category?.Id ?? 0, 
                    Name = _categoryName.Trim() 
                };
            }

            OnSave.InvokeAsync(Product);
        }
    }

    private void HandleCancel()
    {
        OnCancel.InvokeAsync();

        await OnSave.InvokeAsync(Product);
    }

    private async Task HandleCancelAsync()
    {
        await OnCancel.InvokeAsync();
    }
}

    /// <summary>
    /// Event callback when the form is cancelled
    /// </summary>
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnSubmit.InvokeAsync(Product);
    }
}