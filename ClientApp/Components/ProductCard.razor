@using ClientApp.Models
@using ClientApp.Shared.Components

<div class="card product-card @(IsLoading ? "loading" : "")" style="min-width: 18rem;">
    <div class="card-body">
        @if (IsLoading)
        {
            <LoadingIndicator IsVisible="true" Size="LoadingIndicator.SpinnerSize.Small" />
        }
        else
        {
            <h5 class="card-title">@Product.Name</h5>
            @if (Product.Category != null)
            {
                <h6 class="card-subtitle mb-2 text-muted">@Product.Category.Name</h6>
            }
            <div class="product-details">
                <span class="price">@Product.Price.ToString("C")</span>
                <span class="stock badge @(Product.Stock > 0 ? "bg-success" : "bg-danger")">
                    @(Product.Stock > 0 ? $"{Product.Stock} in stock" : "Out of stock")
                </span>
            </div>
            <div class="action-buttons mt-3">
                <button class="btn btn-sm btn-primary" @onclick="() => OnView.InvokeAsync(Product)">View</button>
                <button class="btn btn-sm btn-secondary" @onclick="() => OnEdit.InvokeAsync(Product)">Edit</button>
                <button class="btn btn-sm btn-danger" @onclick="() => OnDelete.InvokeAsync(Product)">Delete</button>
            </div>
        }
    </div>
</div>

<style>
    .product-card {
        transition: transform 0.2s;
        margin: 0.5rem;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .product-card.loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .product-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1rem;
    }

    .price {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }
</style>

@code {
    /// <summary>
    /// Gets or sets the product to display
    /// </summary>
    [Parameter]
    public Product Product { get; set; } = default!;

    /// <summary>
    /// Gets or sets whether the card is in a loading state
    /// </summary>
    [Parameter]
    public bool IsLoading { get; set; }

    /// <summary>
    /// Event callback when the view button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnView { get; set; }

    /// <summary>
    /// Event callback when the edit button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnEdit { get; set; }

    /// <summary>
    /// Event callback when the delete button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<Product> OnDelete { get; set; }
}