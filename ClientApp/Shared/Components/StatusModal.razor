@if (IsVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header @HeaderClass">
                    <h5 class="modal-title">@Title</h5>
                    @if (ShowCloseButton)
                    {
                        <button type="button" class="btn-close" @onclick="OnClose"></button>
                    }
                </div>
                <div class="modal-body">
                    @if (ChildContent != null)
                    {
                        @ChildContent
                    }
                    else
                    {
                        <p>@Message</p>
                    }
                </div>
                <div class="modal-footer">
                    @if (ShowCloseButton)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="OnClose">Close</button>
                    }
                    @if (ShowConfirmButton)
                    {
                        <button type="button" class="btn @ConfirmButtonClass" @onclick="OnConfirm">@ConfirmButtonText</button>
                    }
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets whether the modal is visible
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// Gets or sets the modal title
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "";

    /// <summary>
    /// Gets or sets the modal message
    /// </summary>
    [Parameter]
    public string Message { get; set; } = "";

    /// <summary>
    /// Gets or sets the modal status type
    /// </summary>
    [Parameter]
    public StatusType Status { get; set; } = StatusType.Info;

    /// <summary>
    /// Gets or sets whether to show the close button
    /// </summary>
    [Parameter]
    public bool ShowCloseButton { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to show the confirm button
    /// </summary>
    [Parameter]
    public bool ShowConfirmButton { get; set; }

    /// <summary>
    /// Gets or sets the confirm button text
    /// </summary>
    [Parameter]
    public string ConfirmButtonText { get; set; } = "Confirm";

    /// <summary>
    /// Gets or sets the auto-dismiss timer in milliseconds (0 to disable)
    /// </summary>
    [Parameter]
    public int AutoDismissAfter { get; set; }

    /// <summary>
    /// Gets or sets the child content
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Event callback when the modal is closed
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <summary>
    /// Event callback when the confirm button is clicked
    /// </summary>
    [Parameter]
    public EventCallback OnConfirm { get; set; }

    private string HeaderClass => Status switch
    {
        StatusType.Success => "bg-success text-white",
        StatusType.Error => "bg-danger text-white",
        StatusType.Warning => "bg-warning",
        _ => "bg-info text-white"
    };

    private string ConfirmButtonClass => Status switch
    {
        StatusType.Success => "btn-success",
        StatusType.Error => "btn-danger",
        StatusType.Warning => "btn-warning",
        _ => "btn-primary"
    };

    protected override void OnParametersSet()
    {
        if (IsVisible && AutoDismissAfter > 0)
        {
            var timer = new System.Threading.Timer(async _ =>
            {
                await OnClose.InvokeAsync();
                await InvokeAsync(StateHasChanged);
            }, null, AutoDismissAfter, Timeout.Infinite);
        }
    }

    public enum StatusType
    {
        Info,
        Success,
        Warning,
        Error
    }
}