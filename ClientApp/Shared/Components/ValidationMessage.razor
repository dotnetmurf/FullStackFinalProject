@if (HasErrors)
{
    <div class="@ContainerClass" role="alert">
        @if (ShowSummary)
        {
            <div class="validation-summary">
                @foreach (var error in Errors)
                {
                    <div class="validation-message">@error</div>
                }
            </div>
        }
        else
        {
            <div class="validation-message">@FirstError</div>
        }
    </div>
}

<style>
    .validation-summary {
        margin: 0;
        padding: 0;
    }

    .validation-message {
        margin-bottom: 0.25rem;
    }

    .validation-message:last-child {
        margin-bottom: 0;
    }
</style>

@code {
    /// <summary>
    /// Gets or sets the validation errors
    /// </summary>
    [Parameter]
    public IEnumerable<string> Errors { get; set; } = Array.Empty<string>();

    /// <summary>
    /// Gets or sets whether to show all errors or just the first one
    /// </summary>
    [Parameter]
    public bool ShowSummary { get; set; }

    /// <summary>
    /// Gets or sets the validation type for styling
    /// </summary>
    [Parameter]
    public ValidationType Type { get; set; } = ValidationType.Error;

    /// <summary>
    /// Gets or sets whether the message should be inline
    /// </summary>
    [Parameter]
    public bool IsInline { get; set; }

    /// <summary>
    /// Gets or sets any additional CSS classes
    /// </summary>
    [Parameter]
    public string? AdditionalClasses { get; set; }

    private bool HasErrors => Errors?.Any() == true;

    private string? FirstError => Errors?.FirstOrDefault();

    private string ContainerClass => string.Join(" ", new[]
    {
        "validation-container",
        Type switch
        {
            ValidationType.Warning => "alert alert-warning",
            ValidationType.Info => "alert alert-info",
            _ => "alert alert-danger"
        },
        IsInline ? "d-inline-block" : "",
        AdditionalClasses
    }.Where(c => !string.IsNullOrEmpty(c)));

    public enum ValidationType
    {
        Error,
        Warning,
        Info
    }
}