@page "/product/{id:int}"
@page "/product/new"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using FullStackApp.ServerApp.Models
@using FullStackApp.ClientApp.Services

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@(Id == null ? "New Product" : "Edit Product")</h1>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
            </div>
            
            @if (Loading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading product information...</p>
                </div>
            }
            else if (Error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error</h4>
                    <p>@Error</p>
                    <button class="btn btn-primary mt-3" @onclick="LoadProductAsync">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            }
            else
            {
                <EditForm Model="@Product" OnValidSubmit="HandleValidSubmit" class="row">
                    <div class="col-12 col-md-8 col-lg-6 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />
                        
                        @if (ServerErrors.Any())
                        {
                            <div class="alert alert-danger mb-3">
                                <ul class="mb-0">
                                    @foreach (var error in ServerErrors)
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="Product.Name" />
                            <ValidationMessage For="@(() => Product.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="Product.Description" />
                            <ValidationMessage For="@(() => Product.Description)" />
                        </div>

                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="Product.Price" />
                            <ValidationMessage For="@(() => Product.Price)" />
                        </div>

                        <div class="mb-3">
                            <label for="stock" class="form-label">Stock</label>
                            <InputNumber id="stock" class="form-control" @bind-Value="Product.Stock" />
                            <ValidationMessage For="@(() => Product.Stock)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@IsSaving">
                                @if (IsSaving)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Saving...</span>
                                }
                                else
                                {
                                    <span>Save Product</span>
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Product Product { get; set; } = new();
    private bool Loading { get; set; } = true;
    private bool IsSaving { get; set; }
    private string? Error { get; set; }
    private List<string> ServerErrors { get; set; } = new();

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject] 
    private IProductService ProductService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductAsync();
    }

    private async Task LoadProductAsync()
    {
        Loading = true;
        Error = null;
        ServerErrors.Clear();

        try
        {
            if (Id.HasValue)
            {
                var loadedProduct = await ProductService.GetProductAsync(Id.Value);
                if (loadedProduct == null)
                {
                    Error = $"Product with ID {Id} not found.";
                    return;
                }
                Product = loadedProduct;
            }
        }
        catch (Exception ex)
        {
            Error = $"Error loading product: {ex.Message}";
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!ModelState.IsValid()) return;
        
        IsSaving = true;
        ServerErrors.Clear();

        try
        {
            if (Id.HasValue)
            {
                await ProductService.UpdateProductAsync(Id.Value, Product);
            }
            else
            {
                await ProductService.CreateProductAsync(Product);
            }
            NavigateToProducts();
        }
        catch (Exception ex)
        {
            ServerErrors.Add($"Error saving product: {ex.Message}");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private void NavigateBack()
    {
        NavigateToProducts();
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("fetchproducts");
    }
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@(_isNewProduct ? "New Product" : "Edit Product")</h1>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
            </div>
            
            @if (_loading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading product information...</p>
                </div>
            }
            else if (_error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error</h4>
                    <p>@_error</p>
                    <button class="btn btn-primary mt-3" @onclick="LoadProductAsync">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            }
            else if (_editContext != null)
            {
                <div class="row">
                    <div class="col-12 col-md-8 col-lg-6 mx-auto">
                        <EditForm EditContext="_editContext" OnValidSubmit="SaveProductAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            
                            @if (_serverErrors.Any())
                            {
                                <div class="alert alert-danger mb-3">
                                    <ul class="mb-0">
                                        @foreach (var error in _serverErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="_product.Name" />
                                <ValidationMessage For="@(() => _product.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <div class="input-group">
                                    <InputText id="category" class="form-control" @bind-Value="_product.Category.Name" list="categories" />
                                    <datalist id="categories">
                                        @foreach (var category in _availableCategories)
                                        {
                                            <option value="@category" />
                                        }
                                    </datalist>
                                </div>
                                <ValidationMessage For="@(() => _product.Category.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                <InputNumber id="price" class="form-control" @bind-Value="_product.Price" />
                                <ValidationMessage For="@(() => _product.Price)" />
                            </div>

                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <InputNumber id="stock" class="form-control" @bind-Value="_product.Stock" />
                                <ValidationMessage For="@(() => _product.Stock)" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Product</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Product</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@using Microsoft.AspNetCore.Components.Forms

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@(_isNewProduct ? "New Product" : "Edit Product")</h1>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
            </div>
            
            @if (_loading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading product information...</p>
                </div>
            }
            else if (_error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error</h4>
                    <p>@_error</p>
                    <button class="btn btn-primary mt-3" @onclick="LoadProductAsync">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            }
            else if (_editContext != null)
            {
                <div class="row">
                    <div class="col-12 col-md-8 col-lg-6 mx-auto">
                        <EditForm EditContext="_editContext" OnValidSubmit="SaveProductAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            
                            @if (_serverErrors.Any())
                            {
                                <div class="alert alert-danger mb-3">
                                    <ul class="mb-0">
                                        @foreach (var error in _serverErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            }
                            
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="_product.Name" @bind-Value:event="oninput" />
                                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => _product.Name" />
                            </div>

                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <div class="input-group">
                                    <InputText id="category" class="form-control" @bind-Value="_product.Category.Name" @bind-Value:event="oninput" list="categories" />
                                    <datalist id="categories">
                                        @foreach (var category in _availableCategories)
                                        {
                                            <option value="@category" />
                                        }
                                    </datalist>
                                </div>
                                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => _product.Category.Name" />
                            </div>

                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                <InputNumber id="price" class="form-control" @bind-Value="_product.Price" @bind-Value:event="oninput" />
                                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => _product.Price" />
                            </div>

                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <InputNumber id="stock" class="form-control" @bind-Value="_product.Stock" @bind-Value:event="oninput" />
                                <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => _product.Stock" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Product</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Product</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<PageTitle>@(_isNewProduct ? "New Product" : "Edit Product") - InventoryHub</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@(_isNewProduct ? "New Product" : "Edit Product")</h1>
                <button class="btn btn-secondary" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
            </div>

            @if (_loading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading product information...</p>
                </div>
            }
            else if (_error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error</h4>
                    <p>@_error</p>
                    <button class="btn btn-primary mt-3" @onclick="LoadProductAsync">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12 col-md-8 col-lg-6 mx-auto">
                        <EditForm Model="@_product" OnValidSubmit="SaveProductAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            
                            @if (_serverErrors.Any())
                            {
                                <div class="alert alert-danger mb-3">
                                    <ul class="mb-0">
                                        @foreach (var error in _serverErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            }

                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="_product.Name" @bind-Value:event="oninput" />
                                <ValidationMessage For="@(() => _product.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <div class="input-group">
                                    <InputText id="category" class="form-control" @bind-Value="_product.Category.Name" @bind-Value:event="oninput" list="categories" />
                                    <datalist id="categories">
                                        @foreach (var category in _availableCategories)
                                        {
                                            <option value="@category" />
                                        }
                                    </datalist>
                                </div>
                                <ValidationMessage For="@(() => _product.Category.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                <InputNumber id="price" class="form-control" @bind-Value="_product.Price" @bind-Value:event="oninput" />
                                <ValidationMessage For="@(() => _product.Price)" />
                            </div>

                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <InputNumber id="stock" class="form-control" @bind-Value="_product.Stock" @bind-Value:event="oninput" />
                                <ValidationMessage For="@(() => _product.Stock)" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                                    @if (_isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Product</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
            </div>

            <ErrorBoundary @ref="_errorBoundary">
                <ChildContent>
                    @if (_loading)
                    {
                        <LoadingIndicator IsVisible="true" Message="@(_isNewProduct ? "Preparing form..." : "Loading product...")" />
                    }
                    else if (_error != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            <h4 class="alert-heading">Error</h4>
                            <p>@_error</p>
                            @if (!_isNewProduct)
                            {
                                <div class="mt-3">
                                    <button class="btn btn-primary me-2" @onclick="LoadProduct">Try Again</button>
                                    <button class="btn btn-secondary" @onclick="NavigateBack">Go Back</button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <ProductForm Product="@_product"
                                   IsNew="@_isNewProduct"
                                   IsLoading="@_isSaving"
                                   ShowServerErrors="@(_serverErrors.Any())"
                                   ServerErrors="@_serverErrors"
                                   Categories="@_availableCategories"
                                   OnSave="SaveProduct"
                                   OnCancel="NavigateBack" />
                    }
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="alert alert-danger" role="alert">
                        <h4 class="alert-heading">Unexpected Error</h4>
                        <p>@ex.Message</p>
                        <hr>
                        <p class="mb-0">Please try again later or contact support if the problem persists.</p>
                        <div class="mt-3">
                            <button class="btn btn-primary me-2" @onclick="@(() => _errorBoundary?.Recover())">Try Again</button>
                            <button class="btn btn-secondary" @onclick="NavigateBack">Go Back</button>
                        </div>
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </div>
    </div>
</div>

@if (_showStatusModal)
{
    <StatusModal Title="@_statusModalTitle"
                 Message="@_statusModalMessage"
                 IsSuccess="@_isSuccess"
                 OnClose="CloseStatusModal" />
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private Models.Product _product = new();
    private bool _loading = true;
    private bool _isSaving = false;
    private string? _error;
    private List<string> _serverErrors = new();
    private bool _isNewProduct => Id == null;
    private HashSet<string> _availableCategories = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!_isNewProduct)
            {
                await LoadProductAsync();
            }
            else
            {
                _loading = false;
                _product = new Models.Product
                {
                    Category = new Category { Name = "" }
                };
            }

            await LoadCategoriesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing product page");
            _error = "Failed to initialize the page. Please try again.";
        }
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            var categories = await ProductService.GetCategoriesAsync();
            _availableCategories = new HashSet<string>(categories.Select(c => c.Name));
            Logger.LogInformation("Loaded {Count} categories", _availableCategories.Count);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load categories");
            // Don't throw - this is a non-critical feature
        }
    }

    private async Task LoadProductAsync()
    {
        try
        {
            _loading = true;
            _error = null;
            _serverErrors.Clear();
            
            Logger.LogInformation("Loading product with ID {Id}", Id);
            var product = await ProductService.GetProductAsync(Id!.Value);
            
            if (product == null)
            {
                _error = $"Product with ID {Id} not found.";
                Logger.LogWarning("Product not found with ID {Id}", Id);
                return;
            }
            
            _product = product;
            Logger.LogInformation("Successfully loaded product {Id}", Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product {Id}", Id);
            _error = "Failed to load the product. Please try again.";
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SaveProductAsync()
    {
        if (_isSaving) return;

        try
        {
            _isSaving = true;
            _serverErrors.Clear();

            if (_isNewProduct)
            {
                var newProduct = await ProductService.CreateProductAsync(_product);
                NavigationManager.NavigateTo($"/product/{newProduct.Id}");
            }
            else
            {
                await ProductService.UpdateProductAsync(Id!.Value, _product);
                NavigationManager.NavigateTo("/products");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving product");
            _serverErrors.Add("Failed to save the product. Please try again.");
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/products");
    }
        }
        catch (Exception ex)
        {
            _error = "Error loading product: " + ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SaveProduct(Models.Product product)
    {
        try
        {
            _isSaving = true;
            _serverErrors.Clear();

            if (string.IsNullOrWhiteSpace(product.Name))
            {
                _serverErrors.Add("Product name is required.");
                return;
            }

            if (product.Price <= 0)
            {
                _serverErrors.Add("Price must be greater than zero.");
                return;
            }

            if (product.Stock < 0)
            {
                _serverErrors.Add("Stock cannot be negative.");
                return;
            }

            if (_isNewProduct)
            {
                await ProductService.CreateProductAsync(product);
                ShowStatusModal("Success", "Product created successfully.", true);
            }
            else
            {
                await ProductService.UpdateProductAsync(Id!.Value, product);
                ShowStatusModal("Success", "Product updated successfully.", true);
            }
        }
        catch (Exception ex)
        {
            _serverErrors.Add($"Failed to save product: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void ShowStatusModal(string title, string message, bool isSuccess)
    {
        _statusModalTitle = title;
        _statusModalMessage = message;
        _isSuccess = isSuccess;
        _showStatusModal = true;
    }

    private void CloseStatusModal()
    {
        _showStatusModal = false;
        if (_isSuccess)
        {
            NavigateBack();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}