@page "/fetchproducts"
@using ClientApp.Models
@inject ClientApp.Services.ProductService ProductService

@* 
    Component: FetchProducts
    Purpose: Displays a grid of products fetched from the backend API
    Features: 
    - Loading state handling
    - Error state management
    - Responsive product grid layout
    - Price formatting
    - Stock level indication
*@

<h3>Product List</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (products?.Items != null && products.Items.Any())
{
    <div class="row mb-3">
        <div class="col">
            <p>
                @{
                    var start = ((products!.PageNumber - 1) * products.PageSize) + 1;
                    var end = Math.Min(products.PageNumber * products.PageSize, products.TotalCount);
                }
                Showing @start - @end of @products.TotalCount items
            </p>
        </div>
    </div>

    <div class="product-grid">
        @foreach (var product in products.Items)
        {
            <div class="product-item">
                <h5>@product.Name</h5>
                <p class="category">@product.Category?.Name</p>
                <p class="price">@product.Price.ToString("C")</p>
                <span class="badge bg-@(product.Stock > 0 ? "success" : "danger")">
                    @(product.Stock > 0 ? $"{product.Stock} in stock" : "Out of stock")
                </span>
            </div>
        }
    </div>

    <div class="row mt-3">
        <div class="col">
            <nav aria-label="Product navigation">
                <ul class="pagination">
                    <li class="page-item @(!products?.HasPreviousPage == true ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadPage(products!.PageNumber - 1)" disabled="@(!products!.HasPreviousPage)">
                            Previous
                        </button>
                    </li>
                    <li class="page-item active">
                        <span class="page-link">@products?.PageNumber</span>
                    </li>
                    <li class="page-item @(!products?.HasNextPage == true ? "disabled" : "")">
                        <button class="page-link" @onclick="() => LoadPage(products!.PageNumber + 1)" disabled="@(!products!.HasNextPage)">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}
else
{
    <p>No products available.</p>
}

@code {
    /// <summary>
    /// Current page of products retrieved from the ProductService
    /// </summary>
    private PaginatedList<Product>? products;

    /// <summary>
    /// Current page number for pagination
    /// </summary>
    private int currentPage = 1;

    /// <summary>
    /// Items per page for pagination
    /// </summary>
    private const int PageSize = 10;

    /// <summary>
    /// Loading state indicator
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// Error message to display, if any
    /// </summary>
    private string? errorMessage;

    /// <summary>
    /// Loads products when the component is initialized
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadPage(1);
    }

    /// <summary>
    /// Loads a specific page of products
    /// </summary>
    /// <param name="pageNumber">The page number to load</param>
    private async Task LoadPage(int pageNumber)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            products = await ProductService.GetProductsAsync(pageNumber, PageSize);
            currentPage = pageNumber;
            
            if (products?.Items == null || !products.Items.Any())
            {
                errorMessage = "No products available.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading products: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
