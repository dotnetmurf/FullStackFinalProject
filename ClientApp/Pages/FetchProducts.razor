@page "/fetchproducts"
@inject ClientApp.Services.ProductService ProductService

<h3>Product List</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (products != null && products.Length > 0)
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <span class="badge bg-secondary">Stock: @product.Stock</span>
            </li>
        }
    </ul>
}
else
{
    <p>No products available.</p>
}

@code {
    private ClientApp.Services.Product[]? products;
    private string? errorMessage;
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        products = await ProductService.GetProductsAsync();
        if (products == null || products.Length == 0)
        {
            errorMessage = "No products available.";
        }
        isLoading = false;
    }

    // Product class is now provided by ProductService
}
