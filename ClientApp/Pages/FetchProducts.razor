@page "/fetchproducts"
@inject HttpClient Http

<h3>Product List</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (products != null && products.Length > 0)
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <span class="badge bg-secondary">Stock: @product.Stock</span>
            </li>
        }
    </ul>
}
else
{
    <p>No products available.</p>
}

@code {
    private Product[]? products;
    private string? errorMessage;
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            // Configure HttpClient with timeout
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            
            // Call the back-end API
            products = await Http.GetFromJsonAsync<Product[]>(
                "http://localhost:5132/api/products", 
                cts.Token);
                
            if (products == null || products.Length == 0)
            {
                errorMessage = "No products available.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            Console.WriteLine($"HTTP Request Error: {ex}");
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request timed out. Please try again.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error fetching products: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
    }
}
