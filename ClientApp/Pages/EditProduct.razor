@page "/product/edit/{id:int}"
@using ClientApp.Models
@using ClientApp.Services
@inject ProductService ProductService
@inject NavigationManager Navigation

<PageTitle>Edit Product - InventoryHub</PageTitle>

<div class="container mt-4">
    <h2>Edit Product</h2>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (product != null)
    {
        <div class="card">
            <div class="card-body">
                <ProductForm Product="@product" 
                            OnSubmit="HandleUpdate" 
                            OnCancel="HandleCancel"
                            IsEditMode="true" />
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            Product not found.
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductAsync();
    }

    private async Task LoadProductAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            product = await ProductService.GetProductByIdAsync(Id);
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to connect to the server. Please ensure the server is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading the product: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleUpdate(Product updatedProduct)
    {
        try
        {
            var request = new UpdateProductRequest
            {
                Name = updatedProduct.Name,
                Description = updatedProduct.Description,
                Price = updatedProduct.Price,
                Stock = updatedProduct.Stock,
                Category = updatedProduct.Category
            };

            await ProductService.UpdateProductAsync(Id, request);
            Navigation.NavigateTo("/products");
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to update product. Please ensure the server is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while updating the product: {ex.Message}";
        }
    }

    private void HandleCancel()
    {
        Navigation.NavigateTo("/products");
    }
}
