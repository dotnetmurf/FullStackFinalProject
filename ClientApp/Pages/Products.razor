@page "/products"
@using ClientApp.Models
@using ClientApp.Services
@inject ProductService ProductService
@inject NavigationManager Navigation

<PageTitle>Products - InventoryHub</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Products</h1>
        <button class="btn btn-success" @onclick="NavigateToCreate">
            <i class="oi oi-plus"></i> Add New Product
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (products != null && products.Items.Any())
    {
        <div class="row">
            @foreach (var product in products.Items)
            {
                <div class="col-md-6 col-lg-4">
                    <ProductCard Product="@product" OnDetailsClicked="NavigateToDetails" />
                </div>
            }
        </div>

        <!-- Pagination Controls -->
        <div class="mt-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <p class="text-muted mb-0">
                        Showing page @products.PageNumber of @products.TotalPages 
                        (@products.TotalCount total products)
                    </p>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-md-end align-items-center gap-2">
                        <label for="pageSize" class="form-label mb-0">Items per page:</label>
                        <select id="pageSize" class="form-select" style="width: auto;" 
                                value="@currentPageSize" @onchange="OnPageSizeChanged">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="40">40</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <nav aria-label="Product pagination" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(!products.HasPreviousPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(1)" 
                                disabled="@(!products.HasPreviousPage)">
                            First
                        </button>
                    </li>
                    <li class="page-item @(!products.HasPreviousPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPageNumber - 1)" 
                                disabled="@(!products.HasPreviousPage)">
                            Previous
                        </button>
                    </li>
                    
                    @for (int i = GetStartPage(); i <= GetEndPage(); i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == currentPageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(!products.HasNextPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPageNumber + 1)" 
                                disabled="@(!products.HasNextPage)">
                            Next
                        </button>
                    </li>
                    <li class="page-item @(!products.HasNextPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(products.TotalPages)" 
                                disabled="@(!products.HasNextPage)">
                            Last
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            No products found. Click "Add New Product" to create one.
        </div>
    }
</div>

@code {
    private PaginatedList<Product>? products;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int currentPageNumber = 1;
    private int currentPageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    /// <summary>
    /// Called when navigating to this page - ensures fresh data is loaded
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await LoadProductsAsync();
    }

    /// <summary>
    /// Loads products from the server with current pagination settings
    /// </summary>
    private async Task LoadProductsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            products = await ProductService.GetProductsAsync(pageNumber: currentPageNumber, pageSize: currentPageSize);
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to connect to the server. Please ensure the server is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading products: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Changes to the specified page number
    /// </summary>
    /// <param name="pageNumber">The page number to navigate to</param>
    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || (products != null && pageNumber > products.TotalPages))
        {
            return;
        }

        currentPageNumber = pageNumber;
        await LoadProductsAsync();
    }

    /// <summary>
    /// Handles the page size change event
    /// </summary>
    /// <param name="e">The change event arguments</param>
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            currentPageSize = newPageSize;
            currentPageNumber = 1; // Reset to first page when changing page size
            await LoadProductsAsync();
        }
    }

    /// <summary>
    /// Calculates the starting page number for pagination display
    /// </summary>
    /// <returns>The starting page number</returns>
    private int GetStartPage()
    {
        if (products == null) return 1;

        // Show up to 5 page numbers at a time
        int maxPagesToShow = 5;
        int halfWindow = maxPagesToShow / 2;

        int startPage = Math.Max(1, currentPageNumber - halfWindow);
        int endPage = Math.Min(products.TotalPages, startPage + maxPagesToShow - 1);

        // Adjust start if we're near the end
        if (endPage - startPage < maxPagesToShow - 1)
        {
            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
        }

        return startPage;
    }

    /// <summary>
    /// Calculates the ending page number for pagination display
    /// </summary>
    /// <returns>The ending page number</returns>
    private int GetEndPage()
    {
        if (products == null) return 1;

        int maxPagesToShow = 5;
        int halfWindow = maxPagesToShow / 2;

        int startPage = Math.Max(1, currentPageNumber - halfWindow);
        int endPage = Math.Min(products.TotalPages, startPage + maxPagesToShow - 1);

        return endPage;
    }

    private void NavigateToDetails(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/product/create");
    }
}
