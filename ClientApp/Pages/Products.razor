@page "/products"
@using ClientApp.Models
@using ClientApp.Services
@using ClientApp.Shared.Components
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ILogger<Products> Logger

<h1>Products</h1>

<div class="mb-4">
    <button class="btn btn-primary" @onclick="NavigateToCreate">
        <i class="bi bi-plus-circle"></i> Add Product
    </button>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search products..." 
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="pageSize">
            <option value="10">10 per page</option>
            <option value="20">20 per page</option>
            <option value="50">50 per page</option>
        </select>
    </div>
</div>

<LoadingIndicator IsLoading="@isLoading" />

@if (!isLoading && errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!isLoading && products != null)
{
    <ProductGrid Products="products" 
                OnEdit="NavigateToEdit"
                OnDelete="HandleDelete"
                OnPageChange="HandlePageChange"
                OnSort="HandleSort" />
}

@code {
    private PaginatedList<Product>? products;
    private bool isLoading;
    private string? errorMessage;
    private string? searchTerm;
    private int currentPage = 1;
    private int pageSize = 10;
    private string? sortField;
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            products = await ProductService.GetProductsAsync(currentPage, pageSize);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            errorMessage = "Error loading products. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSearch()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private async Task HandlePageChange(int newPage)
    {
        currentPage = newPage;
        await LoadProducts();
    }

    private async Task HandleSort((string Field, bool IsAscending) sort)
    {
        sortField = sort.Field;
        sortAscending = sort.IsAscending;
        await LoadProducts();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/product/create");
    }

    private void NavigateToEdit(Product product)
    {
        NavigationManager.NavigateTo($"/product/edit/{product.Id}");
    }

    private async Task HandleDelete(Product product)
    {
        try
        {
            await ProductService.DeleteProductAsync(product.Id);
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting product {ProductId}", product.Id);
            errorMessage = "Error deleting product. Please try again later.";
        }
    }
}