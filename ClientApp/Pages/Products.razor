@page "/products"
@using ClientApp.Models
@using ClientApp.Services
@inject ProductService ProductService
@inject ProductsStateService StateService
@inject NavigationManager Navigation

<PageTitle>Products - InventoryHub</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-3">
            <h1 class="mb-0">Products</h1>
            <button class="btn btn-primary" @onclick="ShowRefreshModal" disabled="@isRefreshing">
                @if (isRefreshing)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    <span>Refreshing...</span>
                }
                else
                {
                    <i class="oi oi-reload"></i>
                    <span>Refresh Sample Data</span>
                }
            </button>
        </div>
        <button class="btn btn-success" @onclick="NavigateToCreate">
            <i class="oi oi-plus"></i> Add New Product
        </button>
    </div>

    <!-- Refresh Confirmation Modal -->
    @if (showRefreshModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Refresh Sample Data</h5>
                        <button type="button" class="btn-close" @onclick="HideRefreshModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-warning mb-3" role="alert">
                            <i class="oi oi-warning"></i> <strong>Warning:</strong> This action cannot be undone.
                        </div>
                        <p>This will:</p>
                        <ul>
                            <li>Delete all current products from the database</li>
                            <li>Reset the database with fresh sample data (36 products)</li>
                            <li>Clear all cached product data</li>
                        </ul>
                        <p class="mb-0">Are you sure you want to continue?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideRefreshModal">
                            <i class="oi oi-x"></i> Cancel
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmRefreshSampleData">
                            <i class="oi oi-check"></i> OK, Refresh Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (products != null && products.Items.Any())
    {
        <div class="row">
            @foreach (var product in products.Items)
            {
                <div class="col-md-6 col-lg-4">
                    <ProductCard Product="@product" OnDetailsClicked="NavigateToDetails" />
                </div>
            }
        </div>

        <!-- Pagination Controls -->
        <div class="mt-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <p class="text-muted mb-0">
                        Showing page @products.PageNumber of @products.TotalPages 
                        (@products.TotalCount total products)
                    </p>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-md-end align-items-center gap-2">
                        <label for="pageSize" class="form-label mb-0">Items per page:</label>
                        <select id="pageSize" class="form-select" style="width: auto;" 
                                value="@StateService.PageSize" @onchange="OnPageSizeChanged">
                            <option value="12">12</option>
                            <option value="24">24</option>
                            <option value="36">36</option>
                            <option value="48">48</option>
                            <option value="60">60</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <nav aria-label="Product pagination" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(!products.HasPreviousPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(1)" 
                                disabled="@(!products.HasPreviousPage)">
                            First
                        </button>
                    </li>
                    <li class="page-item @(!products.HasPreviousPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(StateService.PageNumber - 1)" 
                                disabled="@(!products.HasPreviousPage)">
                            Previous
                        </button>
                    </li>
                    
                    @for (int i = GetStartPage(); i <= GetEndPage(); i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == StateService.PageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(!products.HasNextPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(StateService.PageNumber + 1)" 
                                disabled="@(!products.HasNextPage)">
                            Next
                        </button>
                    </li>
                    <li class="page-item @(!products.HasNextPage ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(products.TotalPages)" 
                                disabled="@(!products.HasNextPage)">
                            Last
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            No products found. Click "Add New Product" to create one.
        </div>
    }
</div>

@code {
    private PaginatedList<Product>? products;
    private bool isLoading = true;
    private bool isRefreshing = false;
    private bool showRefreshModal = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    /// <summary>
    /// Loads products from the server with current pagination settings
    /// </summary>
    private async Task LoadProductsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            products = await ProductService.GetProductsAsync(pageNumber: StateService.PageNumber, pageSize: StateService.PageSize);
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to connect to the server. Please ensure the server is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading products: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Changes to the specified page number
    /// </summary>
    /// <param name="pageNumber">The page number to navigate to</param>
    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || (products != null && pageNumber > products.TotalPages))
        {
            return;
        }

        StateService.SetPageNumber(pageNumber);
        await LoadProductsAsync();
    }

    /// <summary>
    /// Handles the page size change event
    /// </summary>
    /// <param name="e">The change event arguments</param>
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            StateService.SetPageSize(newPageSize);
            StateService.SetPageNumber(1); // Reset to first page when changing page size
            await LoadProductsAsync();
        }
    }

    /// <summary>
    /// Calculates the starting page number for pagination display
    /// </summary>
    /// <returns>The starting page number</returns>
    private int GetStartPage()
    {
        if (products == null) return 1;

        // Show up to 5 page numbers at a time
        int maxPagesToShow = 5;
        int halfWindow = maxPagesToShow / 2;

        int startPage = Math.Max(1, StateService.PageNumber - halfWindow);
        int endPage = Math.Min(products.TotalPages, startPage + maxPagesToShow - 1);

        // Adjust start if we're near the end
        if (endPage - startPage < maxPagesToShow - 1)
        {
            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
        }

        return startPage;
    }

    /// <summary>
    /// Calculates the ending page number for pagination display
    /// </summary>
    /// <returns>The ending page number</returns>
    private int GetEndPage()
    {
        if (products == null) return 1;

        int maxPagesToShow = 5;
        int halfWindow = maxPagesToShow / 2;

        int startPage = Math.Max(1, StateService.PageNumber - halfWindow);
        int endPage = Math.Min(products.TotalPages, startPage + maxPagesToShow - 1);

        return endPage;
    }

    /// <summary>
    /// Shows the refresh confirmation modal
    /// </summary>
    private void ShowRefreshModal()
    {
        showRefreshModal = true;
    }

    /// <summary>
    /// Hides the refresh confirmation modal
    /// </summary>
    private void HideRefreshModal()
    {
        showRefreshModal = false;
    }

    /// <summary>
    /// Confirms and executes the sample data refresh
    /// </summary>
    private async Task ConfirmRefreshSampleData()
    {
        showRefreshModal = false;
        await RefreshSampleData();
    }

    /// <summary>
    /// Refreshes the database with fresh sample data
    /// </summary>
    private async Task RefreshSampleData()
    {
        try
        {
            isRefreshing = true;
            errorMessage = string.Empty;
            
            // Call the API to refresh sample data
            await ProductService.RefreshSampleDataAsync();
            
            // Reset to first page and reload products
            StateService.SetPageNumber(1);
            await LoadProductsAsync();
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to connect to the server. Please ensure the server is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while refreshing sample data: {ex.Message}";
        }
        finally
        {
            isRefreshing = false;
        }
    }

    private void NavigateToDetails(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/product/create");
    }
}
